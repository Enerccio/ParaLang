import java.util.HashSet as __JHashSet;
import java.util.ArrayList;
import cz.upol.vanusanik.paralang.runtime.wrappers.CollectionsUtils;

module Collections {

	class HashSet {
		var wrappedSet;
	
		defn init(){
			inst.wrappedSet = __JHashSet->__JHashSet();
		}
		
		defn restricted insert(o){
			return wrappedSet->add(o);
		}
		
		defn push(o){
			var set = new HashSet();
			set.wrappedSet->addAll(wrappedSet);
            set.wrappedSet->add(o);
			return set;
		}
		
		defn contains(o){
			return wrappedSet->contains(o);
		}
		
		defn restricted remove(o){
			return wrappedSet->remove(o);
		}
		
		defn restricted clear(){
			wrappedSet->clear();
		}
		
		defn size(){
			return wrappedSet->size();
		}
		
		defn __str(){
			return "Set=" + wrappedSet;
		}
	}
	
	class List {
		var wrappedList;
		
		defn init(){
			wrappedList = ArrayList->ArrayList();
		}
		
		defn restricted add(o){
			return wrappedList->add(o);
		}
		
		defn append(o){
			var list = new List();
            list.wrappedList->addAll(wrappedList);
            list.wrappedList->add(o);
            return list;
		}
		
		defn restricted insert(o, index){
			return wrappedList->add(index, o);
		}
		
		defn appendAt(o, index){
			var list = new List();
            list.wrappedList->addAll(wrappedList);
            list.wrappedList->add(index, o);
            return list;
		}
		
		defn restricted remove(o){
			return wrappedList->remove(o);
		}
		
		defn restricted removeAt(o){
			return CollectionsUtils->removeAt(wrappedList, o);
		}
        
        defn restricted setAt(index, o){
            return wrappedList->set(index, o);
        }
		
		defn get(index){
			return wrappedList->get(index);
		}
		
		defn find(o){
			return wrappedList->indexOf(o);
		}
		
		defn restricted clear(){
			wrappedList->clear();
		}
		
		defn size(){
			return wrappedList->size();
		}
	
		defn __str(){
			return wrappedList;
		}
	}

};