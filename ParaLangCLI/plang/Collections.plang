import cz.upol.vanusanik.paralang.runtime.wrappers.CollectionsUtils;
import cz.upol.vanusanik.paralang.runtime.wrappers.BooleanArray;
import cz.upol.vanusanik.paralang.runtime.wrappers.IntArray;
import cz.upol.vanusanik.paralang.runtime.wrappers.FloatArray;
import cz.upol.vanusanik.paralang.runtime.wrappers.StringArray;
import cz.upol.vanusanik.paralang.runtime.wrappers.ArrayArray;

using System.BaseException;
using Utils.ArrayIndexOutOfBoundsException;
using Utils.IllegalArgumentException;

using IO;

###
 Collections is a module containing easy to use collections, such as List, Set, Map or Array.
 
 Also contains additional functions related to the collections.
###
module Collections {

    ###
        Collection interface.
    ###
    class Collection {
        
        ###
            Returns value at index. Defaultly throws ArrayIndexOutOfBoundsException since it is an interface.
            *ret object
        ###
        defn get(index){
            throw new Utils.ArrayIndexOutOfBoundsException();
        }
        
        ###
            Returns size of the collection. Defaultly 0.
            *ret integer
        ###
        defn size(){
            return 0;
        }
    
    }
    
    ###
    Variable sized list that can grow when needed. 
    ###
    class List > Collection {
        
        var __array = new [16];
        var __used = 0;
        
        ###
        Returns value at index. May throw ArrayIndexOutOfBoundsException.
        *ret object
        ###
        defn get(index){
            if (index < 0 || index >= __used)
                throw new Utils.ArrayIndexOutOfBoundsException();
            return __array.get(index);
        }
        
        ###
        Sets value at index. May throw ArrayIndexOutOfBoundsException.
        ###
        defn set(index, o){
            if (index < 0 || index >= __used)
                throw new Utils.ArrayIndexOutOfBoundsException();
            __array.set(index, o);
        }
        
        ###
        Appends new value to the list
        ###
        defn add(o){
            __array.set(__used++, o);
            if (__used == __array.size())
                __inflate();
        }
        
        defn __inflate(){
            var na = new [__array.size() * 2];
            array_copy(__array, na);
            __array = na;
        }
        
        ###
        Returns size of the list.
        *ret integer
        ###
        defn size(){
            return __used;
        }
        
        ###
        Removes topright elements and returns it. May throw ArrayIndexOutOfBoundsException.
        *ret object
        ###
        defn pop(){
            return remove(__used-1);
        }
        
        ###
        Removes element at index index. May throw ArrayIndexOutOfBoundsException.
        *ret object
        ###
        defn remove(index){
            var removed = get(index);
            for (var i=index; i<__array.size()-1; i++)
                __array.set(i, __array.get(i+1));
            __array.set(__array.size()-1, NoValue);
            --__used;
            return removed;
        }
        
        ###
        Inserts object at index. May throw ArrayIndexOutOfBoundsException.
        ###
        defn insert(index, o){
            if (index < 0 || index >= __used)
                throw new Utils.ArrayIndexOutOfBoundsException();
            for (var i=__used; i>index; i--){
                __array.set(i, __array.get(i-1));
            }
            __array.set(index, o);
            if (__used == __array.size())
                __inflate();
        }
        
        ###
        Returns true or false whether object is in this list or not
        *ret boolean
        ###
        defn contains(o){
            for (var i=0; i<__used; i++)
                if (__array.get(i) == o)
                    return true;
            return false;
        }
        
        defn _str(){
            var str = "Collections.List-(" + size() + ")[";
            for (var i=0; i<__used; i++){
                var o = __array.get(i);
                str += o;   // TODO
                if (i != (__used-1))
                    str += ", ";
            }
                
            return str + "]";
        }
    }
    
    ###
    Copies array to array. Target array must be longer or same sized as source array
    ###
    defn array_copy(source, target){
        for (var i=0; i<source.size(); i++)
            target.set(i, source.get(i));
    }
    
    ###
    Fixed size array, used to get and set elements. Used to fast access and modification. This class is abstract and should not be used. Use functions above to instantiate arrays.
    
    This Array is different from system type array, which allows any elements to be set into it. Array, however, is used to store primitives that do not require separate de-serialization and thus is faster to use.
    ###
    class Array > Collection{
    	
    	var _array;
    	var _type_exception;
    	var _length;
    	var _atype;
    	
    	defn init(len){
    		inst._length = len;
    	}
    	
    	###
    	Returns object at index index, or NoValue if there is no object
    	*ret underline object or NoValue
    	###
    	defn get(index){
    		if (index < 0 || index >= _length)
    			throw new ArrayIndexOutOfBoundsException();
    		try {
    			return _array->getUnderlineObject(index);
    		} catch (BaseException e){
    			throw new IllegalArgumentException(_type_exception);
    		}
    	}
    	
    	###
    	Sets the object at index in this array.
    	###
    	defn set(index, object){
    		if (index < 0 || index >= _length)
    			throw new ArrayIndexOutOfBoundsException();
    		try {
    			_array->setUnderlineObject(index, object);
    		} catch (BaseException e){
    			throw new IllegalArgumentException(_type_exception);
    		}
    	}
    	
    	###
    	Returns length of this array
    	###
    	defn size(){
    		return _length;
    	}
    	
    	###
    	Returns type of this array. Types can be "boolean", "int", "float", "string" or "array"; 
    	*ret string
    	###
    	defn get_type(){
    		return _atype;
    	}
    	
    	defn _eq(other){
    		if (other instanceof Array){
    			if (other.size() != size())
    				return false;
    			for (var i=0; i<size(); i++)
    				if (get(i) != other.get(i))
    					return false;
    			return true;
    		}
    		return false;
    	}
    	
    	defn __neq(other){
    		return !_eq(other);
    	}
        
        defn _str(){
            return _array._str();
        }
    }
    
    ###
    Constructs boolean array which will convert all arguments passed in as a boolean
    *ret Array
    ### 
    defn boolean_array(n){
    	return __boolean_array(BooleanArray->BooleanArray(n));
    }
    
    defn __boolean_array(n, internal_array){
    	var array = new Array(n);
    	array._array = internal_array;
    	array._atype = "boolean";
    	return array;
    }
    
    ###
    Constructs integer array which will only allow int/Integer to be passed in
    *ret Array
    ### 
    defn integer_array(n){
    	return __integer_array(n, IntArray->IntArray(n));
    }
    
    defn __integer_array(n, internal_array){
    	var array = new Array(n);
    	array._array = internal_array;
    	array._type_exception = "Incorrect type of argument passed, must be int or Integer";
    	array._atype = "int";
    	return array;
    }
    
    ###
    Constructs float array which will only allow float/Float to be passed in
    *ret Array
    ### 
    defn float_array(n){
    	return __float_array(n, FloatArray->FloatArray(n));
    }
    
    defn __float_array(n, internal_array){
    	var array = new Array(n);
    	array._array = internal_array;
    	array._type_exception = "Incorrect type of argument passed, must be float or Float";
    	array._atype = "float";
    	return array;
    }
    
    ###
    Constructs string array which will only allow string to be passed in
    *ret Array
    ### 
    defn string_array(n){
    	return _string_array(n, StringArray->StringArray(n));
    }
    
    defn __string_array(n, internal_array){
    	var array = new Array(n);
    	array._array = internal_array;
    	array._type_exception = "Incorrect type of argument passed, must be String";
    	array._atype = "string";
    	return array;
    }
    
    class __ArrayArray > Array {
    
    	defn get(index){
    		var array = super.get(index);
    		var type = array._str();
    		if (type.starts_with("Boolean")){
    			return __boolean_array(array->get_length(), array);
    		}
    		if (type.starts_with("Int")){
    			return __integer_array(array->get_length(), array);
    		}
    		if (type.starts_with("Float")){
    			return __float_array(array->get_length(), array);
    		}
    		if (type.starts_with("String")){
    			return __string_array(array->get_length(), array);
    		}
    		if (type.starts_with("Array")){
    			return __array_array(array->get_length(), array);
    		}
    	}
    	
    	
    	defn set(index, object){
    		if (!(object instanceof Array)){
                throw new IllegalArgumentException(__type_exception);
    		}
    		super.set(index, object._array);
    	}
    }
    
    ###
    Constructs array of arrays which will only allow Array to be passed in
    *ret Array
    ### 
    defn array_array(n){
    	return __array_array(n, ArrayArray->ArrayArray(n));
    }
    
    defn __array_array(n, internal_array){
    	var array = new __ArrayArray(n);
    	array._array = internal_array;
    	array._type_exception = "Incorrect type of argument passed, must be Array";
    	array._atype = "array";
    	return array;
    }
    
    // More functions
    
    ###
    Sorts anything that has get method with index argument, set method with index and object and size method with no arguments in place.
    ###
    defn simple_sort(gettable){
    	__merge_sort(gettable, new [gettable.size()], 0, gettable.size());
    }
    
    defn __merge_sort(source, result, start, end){
    	if (end - start < 2)
    		return;
    		
    	var mid = (start + end) / 2;
    	__merge_sort(source, result, start, mid);
    	__merge_sort(source, result, mid, end);
    	__merge_sort_merge(source, result, start, mid, end);
        copy(result, source, start, end);
    }
    
    defn __merge_sort_merge(source, result, start, mid, end){
    	var i0 = start;
    	var i1 = mid;
    	
    	for (var j=start; j<end; j++){
    		if (i0 < mid && (i1 >= end || source.get(i0) <= source.get(i1))){
    			result.set(j, source.get(i0));
    			++i0;
    		} else {
    			result.set(j, source.get(i1));
    			++i1;
    		}
    	}
    }
    
    ###
    Copies data from collection from into object to with set(ix, obj) method from start to end
    ###
    defn copy(from, to, start, end){
        copy_offset(from, to, start, end, 0);
    }
    
    ###
    Same as copy, but offsets the index in to by k
    ###
    defn copy_offset(from, to, start, end, offset){
        for (var k=start; k<end; k++)
                to.set(k+offset, from.get(k));
    }
    
    ###
    Copies data from source starting at source_start position to target starting at target_start, copies n objects. 
    ###
    defn copy_fromto(source, target, n, source_start, target_start){
        var i = 0;
        do {
            target.set(target_start+i, source.get(source_start+i));
            ++i;
        } while (i < n);
    }
    
    ###
    Maps the values of the provided collection with n1 functor
    ###
    defn map(collection, n1functor){
        return __map(collection, new [collection.size()], n1functor, 0, collection.size());
    }
    
    defn __map(source, result, functor, start, end){
        for (var i=start; i<end; i++)
            result.set(i, functor(source.get(i)));
        return result;
    }
    
    ###
        Reduces elements of collection into single value using n2functor
    ###
    defn reduce(collection, n2functor){
        var init = collection.get(0);
        return __reduce(collection, init, n2functor, 1, collection.size());
    }
    
    defn __reduce(source, result, functor, start, end){
        for (var i=start; i<end; i++)
            result = functor(source.get(i), result);
        return result;
    }
};