import cz.upol.vanusanik.paralang.runtime.wrappers.PLJavaRandom;
import cz.upol.vanusanik.paralang.runtime.wrappers.PLSecureRandom;

using Utils.Time;
using Math;

module Random {
    var random = new Random(NoValue);
    var java_random = new JavaRandom(NoValue);
    var secure_random = new SecureRandom();
    
    class Random {
    
        var seed;
    
        init(seed){
            if (seed == NoValue){
                seed = new Time(NoValue).get_time();
            }
            inst.seed = seed;
        }
        
        restricted get_int(max){
            seed = Math.abs(1103515245 * seed + 12345);
            return seed % max;
        }
        
        restricted get_float(a){
            var r = get_int(2147483647);
            return Math.abs(r / 2147483647.0 * a);
        }
        
        restricted get_clamp(){
            return get_float(1.0);
        }
    }

    class JavaRandom > Random {
        var wrappedObject;
        
        init(seed){
            wrappedObject = PLJavaRandom->PLJavaRandom(seed);
        }
        
        restricted get_int(max){
            return wrappedObject->nextInt(max);
        }
    }
    
    class SecureRandom > Random {
        var wrappedObject;
        
        init(){
            wrappedObject = PLSecureRandom->PLSecureRandom();
        }
    
        restricted get_int(max){
            return wrappedObject->nextInt(max);
        }
    }
};