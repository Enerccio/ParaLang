using IO;
using System;

module Main {
    
    class TreeNode {
    
        var left, right;
        var item;
        
        defn init(l, r, item){
            inst.left = l;
            inst.right = r;
            inst.item = item;
        }
        
        defn restricted itemCheck(){
            if (left == NoValue) 
                return item;
            else 
                return item + left.itemCheck() - right.itemCheck();
        }
    
    }
    
    var minDepth = 4;
    
    defn restricted bottomUpTree(item, depth){
        if (depth > 0){
            return new TreeNode(bottomUpTree(2*item-1, depth-1),
                                bottomUpTree(2*item, depth-1),
                                item);
        } else {
            return new TreeNode(NoValue, NoValue, item);
        }
    }
    
    defn restricted do_calculate(){
        var n = 12;
        var maxDepth = (minDepth + 2 > n) ? minDepth + 2 : n;
        var stretchDepth = maxDepth + 1;
      
        var check = bottomUpTree(0,stretchDepth).itemCheck();
        IO.out.println("stretch tree of depth "+stretchDepth+"\t check: " + check);
      
        var longLivedTree = bottomUpTree(0, maxDepth);
      
        for (var depth=minDepth; depth<=maxDepth; depth+=2){
            var iterations = 1 << (maxDepth - depth + minDepth);
            check = 0;
            
            for (var i=1; i<=iterations; i++){
                check += bottomUpTree(i, depth).itemCheck();
                check += bottomUpTree(-i, depth).itemCheck();
            }
            IO.out.println((iterations*2) + "\t trees of depth " + depth + "\t check: " + check);
        }   
        IO.out.println("long lived tree of depth " + maxDepth + "\t check: "+ longLivedTree.itemCheck());
    }
    
    defn restricted calculate(a, b){
        var ct = System.current_time();
    
        do_calculate();
        
        IO.out.println(System.current_time() - ct);
    }
    
};