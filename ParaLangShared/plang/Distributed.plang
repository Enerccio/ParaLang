using System;
using System.NetworkException;
using Collections;

module Distributed {


    ###
    Sorts anything that has get method with index argument, set method with index and object and size method with no arguments in place distributed.
    ###
	defn distributed_sort(gettable){
		return __distributed_sort(gettable, 0, gettable.size());
	}
    
    class __DistributedSortHelper {
        var source;
        var start, end;
    }

    defn __distributed_sort(source, start, end){
    
        var n = System.free_nodes();
		if (n < 2){
			Collections.__merge_sort(source, Collections.__preload_list(new List(), source.size()), start, end);
            return source;
        }
        
        if (end - start < 65){
            Collections.__merge_sort(source, Collections.__preload_list(new List(), source.size()), start, end);
            return source;
        }
            
        var pd = new __DistributedSortHelper();
        pd.source = source;
        pd.start = Collections.integer_array(2);
        pd.end = Collections.integer_array(2);
        
        var mid = (start + end) / 2;
        pd.start.set(0, start);
        pd.end.set(0, mid);
        pd.start.set(1, mid);
        pd.end.set(1, end);
        
        try {
            var result = (dist (2, pd) {
                var start = passed_arg.start.get(run_id);
                var end = passed_arg.end.get(run_id);
                
                return __distributed_sort(passed_arg.source, start, end);
            });
            
            
            Collections.__merge_sort_copy(result.get(0), source, start, mid);
            Collections.__merge_sort_copy(result.get(1), source, mid, end);
        } catch (NetworkException e){
            Collections.__merge_sort(source, Collections.__preload_list(new List(), source.size()), start, end);
            return source;
        }
        
        return source;
    }
};