using Collections.List;

module Math {

    class MathException > BaseException {
        defn init(message){
            parent.init(message);
        }
    }
    
    class Matrix {
    
        var matrix, n, m;
        
        defn init(n, m){
            inst.n = n;
            inst.m = m;
            matrix = new List();
            for (var i=0; i<n; i++){
                var mcol = new List();
                for (var j=0; j<m; j++)
                    mcol.add(0);
                matrix.add(mcol);
            }
        }   
        
        defn get(i, j){
            return matrix.get(i).get(j);
        }
        
        defn set(i, j, v){
            matrix.get(i).setAt(j, v);
        }
    
        defn __str(){
            return "Matrix <" + m + ", " + n + "> " + __pretty_print_matrix();
        }
        
        defn __pretty_print_matrix(){
            var pp = "[";
            for (var i=0; i<n; i++){
                pp += "[";
                var mcol = matrix.get(i);
                for (var j=0; j<m; j++)
                    pp += mcol.get(j) + (j == m-1 ? "" : " ");
                pp += "]";
            }
            return pp + "]";
        }
        
        defn __mul(other){
            if (other instanceof Matrix){
                return mul_matrix(other);
            } else {
                return mul_scalar(other);
            }
        }
        
        defn mul_scalar(scalar){
            var nm = new Matrix(n, m);
            for (var i=0; i<n; i++)
                    for (var j=0; j<m; j++){
                        nm.set(i, j, get(i, j) * scalar);
                    }
            return nm;
        }
        
        defn mul_matrix(b){
            if (m != b.n)
                throw new MathException("Incompatible matrices");
        }
    }

    class SquareMatrix > Matrix {
        
        defn init(n){
            parent.init(n, n);
        }
    
    }
    
    defn random_matrix(i, j, r, maxv){
        var m = new Matrix(i, j);
        for (i=0; i<m.n; i++)
            for (j=0; j<m.m; j++)
                m.set(i, j, r.get_int(maxv));
        return m;
    }
    
    defn abs(a){
        return a >= 0 ? a : -a;
    }
    
    defn max(a, b){
        return a >= b ? a : b;
    }
    
    defn min(a, b){
        return a <= b? a : b;
    }
    
    defn sqr(a){
        return a * a;
    }
    
    defn sqrt(a){
        if (!(a instanceof number)) 
            throw new MathException("Argument must be a number!");
              
        if (a instanceof integer) {
            return new Integer(a).sqrt().__val;
        } else {
            return new Float(a).sqrt().__val;
        }
    }
};